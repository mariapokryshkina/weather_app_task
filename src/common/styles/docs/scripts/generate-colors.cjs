/**
 * @file Reads the color variables from the `common/styles/colors.scss` file
 * and generates a file in export folder with variables export
 * 
 * To run, run the command in the console
 * `node src/common/styles/docs/scripts/generate-colors.cjs`
 */

const { access, constants, readFile, writeFile } = require( 'fs/promises' );
const path = require( 'path' );

const colorsVariablesPath = '../../colors.scss';
const colorsExportPath = '../export/colors.ts';

const generateColors = async () => {
	try {
		// Checking access to file with mixins
		await access( path.resolve( __dirname, colorsVariablesPath ), constants.R_OK );
	} catch {
		console.error( 'File not found' );
		return;
	}

	const variablesFile = await readFile(
		path.resolve( __dirname, colorsVariablesPath ),
		{ encoding: 'utf8' },
	);
	const colors = readColors( variablesFile );

	await writeFile(
		path.resolve( __dirname, colorsExportPath ),
		generateExport( colors ),
		{ encoding: 'utf8' }
	);

};


try {
	generateColors();
} catch ( error ) {
	console.error( 'Something went wrong :(', error );
}



function readColors( text ) {
	return Array.from( text.matchAll( /^\$(.+): (#[0-9a-z]+|rgba\((?:\d+,){3}\d*\.\d+\)|linear-gradient\(.+\));/gmi ) )
		.map( ( match ) => [match[1], match[2]] )
		.filter( ( [name, value] ) => name && value );
}

function generateExport( colors ) {
	return `/** @file Generated by \`generate-colors.cjs\` script */

const colors = {
${colors.map( ( [name, value] ) => `	'${name}': '${value}',` ).join( '\n' )}
};

export default colors;
`;
}


module.exports.generateColors = generateColors;